# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from yfinance_grpc.v1 import ticker_pb2 as yfinance__grpc_dot_v1_dot_ticker__pb2


class TickerServiceStub(object):
    """TickerService provides access to Yahoo Finance ticker data
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetInfo = channel.unary_unary(
                '/yfinance_grpc.v1.TickerService/GetInfo',
                request_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetInfoRequest.SerializeToString,
                response_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetInfoResponse.FromString,
                _registered_method=True)
        self.GetHistory = channel.unary_unary(
                '/yfinance_grpc.v1.TickerService/GetHistory',
                request_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetHistoryRequest.SerializeToString,
                response_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetHistoryResponse.FromString,
                _registered_method=True)
        self.GetDividends = channel.unary_unary(
                '/yfinance_grpc.v1.TickerService/GetDividends',
                request_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetDividendsRequest.SerializeToString,
                response_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetDividendsResponse.FromString,
                _registered_method=True)
        self.GetSplits = channel.unary_unary(
                '/yfinance_grpc.v1.TickerService/GetSplits',
                request_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetSplitsRequest.SerializeToString,
                response_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetSplitsResponse.FromString,
                _registered_method=True)
        self.GetActions = channel.unary_unary(
                '/yfinance_grpc.v1.TickerService/GetActions',
                request_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetActionsRequest.SerializeToString,
                response_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetActionsResponse.FromString,
                _registered_method=True)
        self.GetFinancials = channel.unary_unary(
                '/yfinance_grpc.v1.TickerService/GetFinancials',
                request_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetFinancialsRequest.SerializeToString,
                response_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetFinancialsResponse.FromString,
                _registered_method=True)
        self.GetBalanceSheet = channel.unary_unary(
                '/yfinance_grpc.v1.TickerService/GetBalanceSheet',
                request_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetBalanceSheetRequest.SerializeToString,
                response_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetBalanceSheetResponse.FromString,
                _registered_method=True)
        self.GetCashFlow = channel.unary_unary(
                '/yfinance_grpc.v1.TickerService/GetCashFlow',
                request_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetCashFlowRequest.SerializeToString,
                response_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetCashFlowResponse.FromString,
                _registered_method=True)
        self.GetEarnings = channel.unary_unary(
                '/yfinance_grpc.v1.TickerService/GetEarnings',
                request_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetEarningsRequest.SerializeToString,
                response_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetEarningsResponse.FromString,
                _registered_method=True)
        self.GetRecommendations = channel.unary_unary(
                '/yfinance_grpc.v1.TickerService/GetRecommendations',
                request_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetRecommendationsRequest.SerializeToString,
                response_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetRecommendationsResponse.FromString,
                _registered_method=True)
        self.GetOptions = channel.unary_unary(
                '/yfinance_grpc.v1.TickerService/GetOptions',
                request_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetOptionsRequest.SerializeToString,
                response_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetOptionsResponse.FromString,
                _registered_method=True)
        self.GetOptionChain = channel.unary_unary(
                '/yfinance_grpc.v1.TickerService/GetOptionChain',
                request_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetOptionChainRequest.SerializeToString,
                response_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetOptionChainResponse.FromString,
                _registered_method=True)
        self.GetCalendar = channel.unary_unary(
                '/yfinance_grpc.v1.TickerService/GetCalendar',
                request_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetCalendarRequest.SerializeToString,
                response_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetCalendarResponse.FromString,
                _registered_method=True)
        self.GetNews = channel.unary_unary(
                '/yfinance_grpc.v1.TickerService/GetNews',
                request_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetNewsRequest.SerializeToString,
                response_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetNewsResponse.FromString,
                _registered_method=True)
        self.GetMajorHolders = channel.unary_unary(
                '/yfinance_grpc.v1.TickerService/GetMajorHolders',
                request_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetMajorHoldersRequest.SerializeToString,
                response_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetMajorHoldersResponse.FromString,
                _registered_method=True)
        self.GetInstitutionalHolders = channel.unary_unary(
                '/yfinance_grpc.v1.TickerService/GetInstitutionalHolders',
                request_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetInstitutionalHoldersRequest.SerializeToString,
                response_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetInstitutionalHoldersResponse.FromString,
                _registered_method=True)
        self.GetMutualFundHolders = channel.unary_unary(
                '/yfinance_grpc.v1.TickerService/GetMutualFundHolders',
                request_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetMutualFundHoldersRequest.SerializeToString,
                response_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetMutualFundHoldersResponse.FromString,
                _registered_method=True)
        self.GetMultipleInfo = channel.unary_unary(
                '/yfinance_grpc.v1.TickerService/GetMultipleInfo',
                request_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetMultipleInfoRequest.SerializeToString,
                response_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetMultipleInfoResponse.FromString,
                _registered_method=True)
        self.DownloadHistory = channel.unary_stream(
                '/yfinance_grpc.v1.TickerService/DownloadHistory',
                request_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.DownloadHistoryRequest.SerializeToString,
                response_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.DownloadHistoryResponse.FromString,
                _registered_method=True)


class TickerServiceServicer(object):
    """TickerService provides access to Yahoo Finance ticker data
    """

    def GetInfo(self, request, context):
        """GetInfo returns general information about a ticker
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHistory(self, request, context):
        """GetHistory returns historical market data for a ticker
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDividends(self, request, context):
        """GetDividends returns dividend history for a ticker
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSplits(self, request, context):
        """GetSplits returns stock split history for a ticker
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetActions(self, request, context):
        """GetActions returns all corporate actions (dividends, splits, capital gains)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFinancials(self, request, context):
        """GetFinancials returns financial statements (income statement)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBalanceSheet(self, request, context):
        """GetBalanceSheet returns balance sheet data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCashFlow(self, request, context):
        """GetCashFlow returns cash flow statement data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEarnings(self, request, context):
        """GetEarnings returns earnings data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRecommendations(self, request, context):
        """GetRecommendations returns analyst recommendations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOptions(self, request, context):
        """GetOptions returns available option expiration dates
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOptionChain(self, request, context):
        """GetOptionChain returns option chain data for a specific expiration date
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCalendar(self, request, context):
        """GetCalendar returns upcoming events, earnings, and dividends
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNews(self, request, context):
        """GetNews returns recent news articles for a ticker
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMajorHolders(self, request, context):
        """GetMajorHolders returns major holders information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInstitutionalHolders(self, request, context):
        """GetInstitutionalHolders returns institutional holders information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMutualFundHolders(self, request, context):
        """GetMutualFundHolders returns mutual fund holders information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMultipleInfo(self, request, context):
        """GetMultipleInfo returns information for multiple tickers at once
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadHistory(self, request, context):
        """DownloadHistory streams historical data for multiple tickers
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TickerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInfo,
                    request_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetInfoRequest.FromString,
                    response_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetInfoResponse.SerializeToString,
            ),
            'GetHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHistory,
                    request_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetHistoryRequest.FromString,
                    response_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetHistoryResponse.SerializeToString,
            ),
            'GetDividends': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDividends,
                    request_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetDividendsRequest.FromString,
                    response_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetDividendsResponse.SerializeToString,
            ),
            'GetSplits': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSplits,
                    request_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetSplitsRequest.FromString,
                    response_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetSplitsResponse.SerializeToString,
            ),
            'GetActions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetActions,
                    request_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetActionsRequest.FromString,
                    response_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetActionsResponse.SerializeToString,
            ),
            'GetFinancials': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFinancials,
                    request_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetFinancialsRequest.FromString,
                    response_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetFinancialsResponse.SerializeToString,
            ),
            'GetBalanceSheet': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBalanceSheet,
                    request_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetBalanceSheetRequest.FromString,
                    response_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetBalanceSheetResponse.SerializeToString,
            ),
            'GetCashFlow': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCashFlow,
                    request_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetCashFlowRequest.FromString,
                    response_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetCashFlowResponse.SerializeToString,
            ),
            'GetEarnings': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEarnings,
                    request_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetEarningsRequest.FromString,
                    response_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetEarningsResponse.SerializeToString,
            ),
            'GetRecommendations': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRecommendations,
                    request_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetRecommendationsRequest.FromString,
                    response_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetRecommendationsResponse.SerializeToString,
            ),
            'GetOptions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOptions,
                    request_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetOptionsRequest.FromString,
                    response_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetOptionsResponse.SerializeToString,
            ),
            'GetOptionChain': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOptionChain,
                    request_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetOptionChainRequest.FromString,
                    response_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetOptionChainResponse.SerializeToString,
            ),
            'GetCalendar': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCalendar,
                    request_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetCalendarRequest.FromString,
                    response_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetCalendarResponse.SerializeToString,
            ),
            'GetNews': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNews,
                    request_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetNewsRequest.FromString,
                    response_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetNewsResponse.SerializeToString,
            ),
            'GetMajorHolders': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMajorHolders,
                    request_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetMajorHoldersRequest.FromString,
                    response_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetMajorHoldersResponse.SerializeToString,
            ),
            'GetInstitutionalHolders': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInstitutionalHolders,
                    request_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetInstitutionalHoldersRequest.FromString,
                    response_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetInstitutionalHoldersResponse.SerializeToString,
            ),
            'GetMutualFundHolders': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMutualFundHolders,
                    request_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetMutualFundHoldersRequest.FromString,
                    response_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetMutualFundHoldersResponse.SerializeToString,
            ),
            'GetMultipleInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMultipleInfo,
                    request_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetMultipleInfoRequest.FromString,
                    response_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.GetMultipleInfoResponse.SerializeToString,
            ),
            'DownloadHistory': grpc.unary_stream_rpc_method_handler(
                    servicer.DownloadHistory,
                    request_deserializer=yfinance__grpc_dot_v1_dot_ticker__pb2.DownloadHistoryRequest.FromString,
                    response_serializer=yfinance__grpc_dot_v1_dot_ticker__pb2.DownloadHistoryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'yfinance_grpc.v1.TickerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('yfinance_grpc.v1.TickerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TickerService(object):
    """TickerService provides access to Yahoo Finance ticker data
    """

    @staticmethod
    def GetInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/yfinance_grpc.v1.TickerService/GetInfo',
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetInfoRequest.SerializeToString,
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/yfinance_grpc.v1.TickerService/GetHistory',
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetHistoryRequest.SerializeToString,
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetHistoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDividends(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/yfinance_grpc.v1.TickerService/GetDividends',
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetDividendsRequest.SerializeToString,
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetDividendsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSplits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/yfinance_grpc.v1.TickerService/GetSplits',
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetSplitsRequest.SerializeToString,
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetSplitsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetActions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/yfinance_grpc.v1.TickerService/GetActions',
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetActionsRequest.SerializeToString,
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetActionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFinancials(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/yfinance_grpc.v1.TickerService/GetFinancials',
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetFinancialsRequest.SerializeToString,
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetFinancialsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBalanceSheet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/yfinance_grpc.v1.TickerService/GetBalanceSheet',
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetBalanceSheetRequest.SerializeToString,
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetBalanceSheetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCashFlow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/yfinance_grpc.v1.TickerService/GetCashFlow',
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetCashFlowRequest.SerializeToString,
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetCashFlowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEarnings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/yfinance_grpc.v1.TickerService/GetEarnings',
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetEarningsRequest.SerializeToString,
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetEarningsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRecommendations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/yfinance_grpc.v1.TickerService/GetRecommendations',
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetRecommendationsRequest.SerializeToString,
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetRecommendationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOptions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/yfinance_grpc.v1.TickerService/GetOptions',
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetOptionsRequest.SerializeToString,
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetOptionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOptionChain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/yfinance_grpc.v1.TickerService/GetOptionChain',
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetOptionChainRequest.SerializeToString,
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetOptionChainResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCalendar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/yfinance_grpc.v1.TickerService/GetCalendar',
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetCalendarRequest.SerializeToString,
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetCalendarResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNews(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/yfinance_grpc.v1.TickerService/GetNews',
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetNewsRequest.SerializeToString,
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetNewsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMajorHolders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/yfinance_grpc.v1.TickerService/GetMajorHolders',
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetMajorHoldersRequest.SerializeToString,
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetMajorHoldersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetInstitutionalHolders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/yfinance_grpc.v1.TickerService/GetInstitutionalHolders',
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetInstitutionalHoldersRequest.SerializeToString,
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetInstitutionalHoldersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMutualFundHolders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/yfinance_grpc.v1.TickerService/GetMutualFundHolders',
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetMutualFundHoldersRequest.SerializeToString,
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetMutualFundHoldersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMultipleInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/yfinance_grpc.v1.TickerService/GetMultipleInfo',
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetMultipleInfoRequest.SerializeToString,
            yfinance__grpc_dot_v1_dot_ticker__pb2.GetMultipleInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DownloadHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/yfinance_grpc.v1.TickerService/DownloadHistory',
            yfinance__grpc_dot_v1_dot_ticker__pb2.DownloadHistoryRequest.SerializeToString,
            yfinance__grpc_dot_v1_dot_ticker__pb2.DownloadHistoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
